open Struct
open Printf

let encode_account (id, balance) =
    let id_b = Bytes.of_string id and balance_b = encode_int balance in 
    Bytes.cat id_b balance_b

let decode_account e_account = 
    let id_b = Bytes.create 64 and balance_b = Bytes.create 4 in 
        begin
            Bytes.blit e_account 0 id_b 0 64;
            Bytes.blit e_account 64 balance_b 0 4;
            (Bytes.to_string id_b,
                Int32.to_int (Bytes.get_int32_be balance_b 0))
        end

let encode_state (accounts: (string * int) list) =
    let len = List.length accounts in
        let l = (encode_int len) :: (List.map encode_account accounts) in 
            Bytes.concat Bytes.empty l

let decode_state state = 
    let rec aux i len acc = 
        if(i>=len) then List.rev acc else 
        let b = Bytes.create 68 in 
            begin 
                Bytes.blit state (i*68+4) b 0 68;
                aux (i+1) len ((decode_account b) :: acc)
            end in 
    let len_b = Bytes.create 4 in 
        begin
            Bytes.blit state 0 len_b 0 4;
            let len = Int32.to_int (Bytes.get_int32_be len_b 0) in 
                aux 0 len []
        end

let verify state_hash state_string = 
    state_hash = string_of_bytes (hash (
            Hex.to_bytes (`Hex state_string
            )
        ))

let print_account account = 
    printf "(%s, %d)\n" (fst account) (snd account)

let print_state state =
    begin
        print_string "[";
        List.iter print_account state;
        print_endline "]"
    end


let _ = 
    let ac1 = ("1dc653a1447946592fe2871eeb01d8fd6ae353bf04ab789199e38777da3fd0c7", 1003) and
        ac2 = ("ad415c298389574a24f009671697dd58a717ec04aaa79bd39a130b1ae7a4b2a9", 8532) and
        ac3 = ("b6a46ab620ab41132a7e062bee0bd7ef6af99d5c25b9021edcb949f2cd6c2bbc", 100) and
        ac4 = ("d91340a0a4fc7283117fb7871a95e983455275347662345ffaaa75d674def6ec", 943) and
        ac5 = ("ff9f179535d17c8f29d7eb8ad3432eb8b16ce684b48527b12a1a71f10d3e63ec", 755) in
    let ec = encode_account ac1 in 
    begin 
        print_endline (string_of_bytes ec);
        let id,b = decode_account ec in 
            printf "(%s, %d)\n" id b;
        printf "%s\n" (string_of_bytes (encode_state [ac1;ac2;ac3;ac4;ac5]));
        print_state (decode_state (encode_state [ac1;ac2;ac3;ac4;ac5]));
        printf "%b\n" 
        (verify "36bfb3ec74122fbecf26d476fcef76312532fe7bb5b9bab414f693361c222d80"
        "0000004201189fad79f64b28f3ba76164d52ec7bbd7fa04701a25caea754bb8b410b45020007abe881b67ab9cc47513a477df2f9a12e768dec7031becc8ef1efd9e630036959befe000055d3036c620d183c03371ec85336396967d9393a6628a282af37d8dd71eec5a16f55000dd7351675a8d93d627c9bfd12305a4999bc0cc89039f76b18b4ee561a833f9a9df114000779fe497cb1d8ad6ebfff4d0d84d181994639718bb3ab3644810fcefe4dd1cfb61d9800037699e75f1d709d8ff9da580516bc4e4323b31e893648fa9dbd50fb654074d958f4f90008d57dc51b6a4f7edf4cd263e93c565e44b41ba1b8885da9d695d70c2e8e2898c88220000937157be9c66377438d578a85b9773c2f4d6a6a422733293830ecc4df5db5ace9483d000d023664760493571e0b59e2dd78ab1737ea4fada1fd2df7bf7699c32c048f9973fe590002990e2f2a8e1346012d7d92ae41eb31ac25b3bb908b3e7f8616505194990e5af2c7920008927b01457c053770e5574ad47a694e824a5d29f378ad4ce5391a3972a92ca3c43365000bf34ae71084e1dc86d1e813651e30f359cb9984405b2b79dea4a7526d3116c5f598810004dd34071bf245f1bb2c27123e63b54362ff13520adc05fa8d35f03a447951b155cc6d000b33f54c614744d7892cfbf6a7ce8bdc8dcc1fae33ff736c964255181e04dc1e306abb00080f3af2930398a89a920556e2fe9f10bc1232d4cca62fcc3e0332e2ee826b5accd7300006aec7fdf7f567792b0bbfe5fc59152a9ad2b375598a0d76a4209d145e182ed86148eb00007bc147d2da743d93bd481afe157f4df057724a023aec74c397e83cf531a3ca0a7d6200075f7594103a612b062586b132344a024c90f2a400b680dca5527725585ee69c327a95000e7c88484ca05ff93966e3070d87a4c14250f3a33dbff7672c224e9eecd0e964a372fb000754e5109ecb12a0adcc5019bbaf9346c7ec3e0d695d237507a7c740d66adc1ba868800002f2da5c2708fe87d706009b30307debd7622bb20d92d6a19ff30f35629e1396519b440005a19b4718b1f0af5bfa6fdc1ecbc253d521d91ef9f8bc5d13ee46f5ac1e862d3107b7000e9a1302b7e213e46486fc3ed7a863066b09aaf3bb7a074c2107ec934f6e7149a2d92e00027b5bde33e43977274e9956af1c9f36c6e2db446807f5712816016a67931ac984da7b000828271485dded3d6ea8ffe7fd8942a73f7d272aa997e6dd5a0684eeb24d400cf32288000c1686e28414ae0f039ac20ba4590596008f4957ad2d4bec7d7cb0309ccbf8f2f61f4d00039db5b14b54a9a1686895d64ca822ffc45ffe78074965ee1aca30dc7b96efef88c670000c4957fe1a2424adccf4b10ac5a83c98ea9d50af60013f69f5e17546056f5e79bb082100009b20bbbcdb56bf703c4e1206b6a24c2c929702a844efe707e858d4f529a68d62076c000653861b89b9fa4fbcd999f6fb9c793008561fb243c32384092a1db759b0d2bb7252ed000c13e512b4015877e5a3c072a7d2cc64bc427581a9f385c098b5c81ff33090a7793814000761603ca823ff9b8be7b636eca857afdf8334f22bf8bc0aec92c5f47c10b635bd3a3200038f939710405659bcf09e44d8bb9fdf6c9b210964f3572a7922e277e666831838fec7000bdb7a68c3e84a0f96bc33b447f43a359ddefcdcc394b03aeabe53acdfc0277d4cf4f0000d7c2bf5c990f06af178e0c3f1a01a07e87257a84bf87ae8d05b7abc72c5ad71bb44bd000940883e3d5528c1b7079b9abeea6fc30492010f3795b2039a1e4217850aa27914c564000d79124ea0ac0c950e3822ad46eb0558d5be1d14944004780d99c643b43dd0c8b9543a000d50df265052897f9647b6289580f90e3eb0ed7205f2613c79a8ba8d9e7cf5c789fe8e0001e2b371572d15fd12d4480da240f30f30902c57de3e2abdffc037c6aa478f0cc8970a0003adcd53c5dd97bbcb1c75e3b8ba9f8a5e0128dd5569b31e2952a5baf02e036116531a000d7fa62cabcfddac3de8434f9115ec8b8f154a6d85b478e539743d6112995ad8dc2ec300027124247538b39e4cd0e1abfb1fc09b0ba1659a08c29ff9a2ae9d702ba4eab2a78ce2000ba4cd3cdd8fd6aae7f782a843bfff0c33ea51437485b20edcd71e1dc1b0f34d61c41d000bcb0c6fc68dec8abd3f9326de205c8b7f1b3c92032d618d69d61c3bec21e784a02411000919c490fb76ed116be87e2d374bdd5745acd2b001bee9d9eb604972172cfe7a1cf4ac000a14b0a77362a43125d0b71c6222671e9c5fed6ea08cb02f98b4b719784be83b2aba48000171ac261c195b1f93e8da6c80979d85dac4d8ab8ab5f23853cc88fc32401a3f3ab3fa000d8cd0255f903750765a4d972b9777d110d8223430f25127bff22cadc7ba2e7f49f18d00099d8558443c76c93e69b40a54571a1b5b152c805d60e95e0bbf1c013fed94cf62bf0b000ae45f0dc67dbbcd5a0798e14fb4e322e137db65909470da8407a00c251fcbe63732f1000f0772670fae8c8a336f32c24df8518d1919c20b377b700a7db7cc25f391c00d2b03fc0002facdc878f3940b1694f176a628aa04ea0cbda4d34261b6f25784ff637cf5dc706c8a0003fad141e470d3257cb461f8ee767c70c0915917e778ac2444a2601972ef2ae250836b0009dc72e3a8cb0f81404a6521431354ed18c8fca9defe5bd49b38722c67e13f878dc729000346e234c3d3275148578449cde5994c6ede1bf4f969c92867110e8a752e0e0182c79c0003b48f2364eba8144e6de823eb8e8695eb7fff060bf91f32ffb73b6ad36242ffdfef430000543bfddd8e3be962463f81d4d4f0062b21ddb4f66d05ccdbe08c0afdda5d686ce4cb000cb0a7d4db889e0a498f85377a0d9c503998237d2d92678b8f3e9b14748cc97d5d6d430001985a79b044ad017d904cf401e74e7069cccf65a261e928f8118f7dfb08a85c6307ee0001ab5bbd6338deb6ad5023c77719f71cac3e08fe8ea90829bd1cecf9964ba7656df6850001e58157c4a4ad386b4f4811c8faf488d63a615c5edf1830bbec536902cc16c7f3fa0000080c12e3d3cffb3c9b407fd889eb0c43121b36c1439a699eafcdece4cf566c437a656d0004ae3adcdf15fc16c40d0285fac162aae5caeea969612da36c31ae611a85a6f369a61c000f1628c8ce676e0a2401c03d83429d5cc6e5dd1db23683ec6a1f1b445f35b3a955611a0003141324191c421a3c4f0a71d132fac99bc1e66f97bfa41fd4ae8ab8eb97933e6d8190000d5d0c169d4f065325462fb54beb4d21e572f6805a30953c200ccb580f74f1ccb5cfc30003870e");
    end
        